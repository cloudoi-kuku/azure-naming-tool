{
  "version": 4,
  "terraform_version": "1.5.7",
  "serial": 1,
  "lineage": "66035393-ae75-2d2d-4715-630058ad0bc3",
  "outputs": {
    "generated_names": {
      "value": {
        "resource_group": {
          "message": "",
          "name": "rg-spa-dev-use-01"
        },
        "storage_account": {
          "message": "This resource type only allows lowercase names. The generated name has been updated to lowercase characters.The specified delimiter was removed. This is often caused by the length of the name exceeding the max length and the delimiter removed to shorten the value or the delimiter is not an allowed character for the resoure type.",
          "name": "stspadevuse01"
        },
        "subnet": {
          "message": "",
          "name": "snet-spa-dev-use-01"
        },
        "virtual_network": {
          "message": "",
          "name": "vnet-spa-dev-use-01"
        },
        "vm_linux": {
          "message": "This resource type only allows lowercase names. The generated name has been updated to lowercase characters.",
          "name": "vm-spa-dev-use-01"
        },
        "vm_windows": {
          "message": "This resource type only allows lowercase names. The generated name has been updated to lowercase characters.The specified delimiter was removed. This is often caused by the length of the name exceeding the max length and the delimiter removed to shorten the value or the delimiter is not an allowed character for the resoure type.",
          "name": "vmspadevuse01"
        },
        "vmss_linux": {
          "message": "This resource type only allows lowercase names. The generated name has been updated to lowercase characters.",
          "name": "vmss-spa-dev-use-01"
        },
        "vmss_windows": {
          "message": "This resource type only allows lowercase names. The generated name has been updated to lowercase characters.The specified delimiter was removed. This is often caused by the length of the name exceeding the max length and the delimiter removed to shorten the value or the delimiter is not an allowed character for the resoure type.",
          "name": "vmssspadevuse01"
        }
      },
      "type": [
        "object",
        {
          "resource_group": [
            "object",
            {
              "message": "string",
              "name": "string"
            }
          ],
          "storage_account": [
            "object",
            {
              "message": "string",
              "name": "string"
            }
          ],
          "subnet": [
            "object",
            {
              "message": "string",
              "name": "string"
            }
          ],
          "virtual_network": [
            "object",
            {
              "message": "string",
              "name": "string"
            }
          ],
          "vm_linux": [
            "object",
            {
              "message": "string",
              "name": "string"
            }
          ],
          "vm_windows": [
            "object",
            {
              "message": "string",
              "name": "string"
            }
          ],
          "vmss_linux": [
            "object",
            {
              "message": "string",
              "name": "string"
            }
          ],
          "vmss_windows": [
            "object",
            {
              "message": "string",
              "name": "string"
            }
          ]
        }
      ]
    },
    "naming_summary": {
      "value": {
        "environment": "dev",
        "location": "use",
        "organization": "so",
        "pattern_examples": {
          "Linux VM": "vm-spa-dev-use-01",
          "Linux VMSS": "vmss-spa-dev-use-01",
          "Resource Group": "rg-spa-dev-use-01",
          "Storage Account": "stspadevuse01",
          "Subnet": "snet-spa-dev-use-01",
          "Virtual Network": "vnet-spa-dev-use-01",
          "Windows VM": "vmspadevuse01",
          "Windows VMSS": "vmssspadevuse01"
        },
        "project": "spa"
      },
      "type": [
        "object",
        {
          "environment": "string",
          "location": "string",
          "organization": "string",
          "pattern_examples": [
            "object",
            {
              "Linux VM": "string",
              "Linux VMSS": "string",
              "Resource Group": "string",
              "Storage Account": "string",
              "Subnet": "string",
              "Virtual Network": "string",
              "Windows VM": "string",
              "Windows VMSS": "string"
            }
          ],
          "project": "string"
        }
      ]
    }
  },
  "resources": [
    {
      "module": "module.rg_name",
      "mode": "data",
      "type": "external",
      "name": "resource_name",
      "provider": "provider[\"registry.terraform.io/hashicorp/external\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "-",
            "program": [
              "bash",
              "-c",
              "set -e\n    \n# Get resource type information\nif [ -n \"\" ]; then\n  # Find resource type with specific property\n  RESOURCE_INFO=$(curl -s -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n    \"http://localhost:8080/api/ResourceTypes\" | \\\n    jq -r '.[] | select(.ShortName == \"rg\" and .property == \"\" and .enabled == true) | \"\\(.id)|\\(.resource)|\\(.property)\"' | head -n1)\nelse\n  # Find resource type without property filter\n  RESOURCE_INFO=$(curl -s -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n    \"http://localhost:8080/api/ResourceTypes\" | \\\n    jq -r '.[] | select(.ShortName == \"rg\" and .enabled == true) | \"\\(.id)|\\(.resource)|\\(.property)\"' | head -n1)\nfi\n    \nif [ -z \"$RESOURCE_INFO\" ]; then\n  echo '{\"error\": \"Resource type not found\"}' \u003e\u00262\n  exit 1\nfi\n    \n# Extract resource ID\nRESOURCE_ID=$(echo \"$RESOURCE_INFO\" | cut -d'|' -f1)\n    \n# Generate name with resource ID\nRESPONSE=$(curl -s -X POST \"http://localhost:8080/api/ResourceNamingRequests/RequestName\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n  -d '{\n    \"ResourceType\": \"rg\",\n    \"ResourceId\": '$RESOURCE_ID',\n    \"ResourceEnvironment\": \"dev\",\n    \"ResourceLocation\": \"use\",\n    \"ResourceOrg\": \"so\",\n    \"ResourceProjAppSvc\": \"spa\",\n    \"ResourceFunction\": \"\",\n    \"ResourceUnitDept\": \"\",\n    \"ResourceInstance\": \"01\",\n    \"CreatedBy\": \"terraform\"\n  }')\n    \n# Check if the response contains an error\nif echo \"$RESPONSE\" | jq -e '.success == false' \u003e /dev/null; then\n  ERROR_MSG=$(echo \"$RESPONSE\" | jq -r '.message // \"Unknown error\"')\n  echo \"{\\\"error\\\": \\\"$ERROR_MSG\\\"}\" \u003e\u00262\n  exit 1\nfi\n    \n# Extract the generated name and return as JSON\nRESOURCE_NAME=$(echo \"$RESPONSE\" | jq -r '.resourceName // \"\"')\nMESSAGE=$(echo \"$RESPONSE\" | jq -r '.message // \"\"')\n    \nif [ -z \"$RESOURCE_NAME\" ]; then\n  echo '{\"error\": \"No resource name returned\"}' \u003e\u00262\n  exit 1\nfi\n    \n# Return the result\njq -n --arg name \"$RESOURCE_NAME\" --arg message \"$MESSAGE\" --arg id \"$RESOURCE_ID\" \\\n  '{name: $name, message: $message, resource_id: $id}'\n"
            ],
            "query": null,
            "result": {
              "message": "",
              "name": "rg-spa-dev-use-01",
              "resource_id": "274"
            },
            "working_dir": null
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "program"
              },
              {
                "type": "index",
                "value": {
                  "value": 2,
                  "type": "number"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "module": "module.storage_name",
      "mode": "data",
      "type": "external",
      "name": "resource_name",
      "provider": "provider[\"registry.terraform.io/hashicorp/external\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "-",
            "program": [
              "bash",
              "-c",
              "set -e\n    \n# Get resource type information\nif [ -n \"\" ]; then\n  # Find resource type with specific property\n  RESOURCE_INFO=$(curl -s -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n    \"http://localhost:8080/api/ResourceTypes\" | \\\n    jq -r '.[] | select(.ShortName == \"st\" and .property == \"\" and .enabled == true) | \"\\(.id)|\\(.resource)|\\(.property)\"' | head -n1)\nelse\n  # Find resource type without property filter\n  RESOURCE_INFO=$(curl -s -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n    \"http://localhost:8080/api/ResourceTypes\" | \\\n    jq -r '.[] | select(.ShortName == \"st\" and .enabled == true) | \"\\(.id)|\\(.resource)|\\(.property)\"' | head -n1)\nfi\n    \nif [ -z \"$RESOURCE_INFO\" ]; then\n  echo '{\"error\": \"Resource type not found\"}' \u003e\u00262\n  exit 1\nfi\n    \n# Extract resource ID\nRESOURCE_ID=$(echo \"$RESOURCE_INFO\" | cut -d'|' -f1)\n    \n# Generate name with resource ID\nRESPONSE=$(curl -s -X POST \"http://localhost:8080/api/ResourceNamingRequests/RequestName\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n  -d '{\n    \"ResourceType\": \"st\",\n    \"ResourceId\": '$RESOURCE_ID',\n    \"ResourceEnvironment\": \"dev\",\n    \"ResourceLocation\": \"use\",\n    \"ResourceOrg\": \"so\",\n    \"ResourceProjAppSvc\": \"spa\",\n    \"ResourceFunction\": \"\",\n    \"ResourceUnitDept\": \"\",\n    \"ResourceInstance\": \"01\",\n    \"CreatedBy\": \"terraform\"\n  }')\n    \n# Check if the response contains an error\nif echo \"$RESPONSE\" | jq -e '.success == false' \u003e /dev/null; then\n  ERROR_MSG=$(echo \"$RESPONSE\" | jq -r '.message // \"Unknown error\"')\n  echo \"{\\\"error\\\": \\\"$ERROR_MSG\\\"}\" \u003e\u00262\n  exit 1\nfi\n    \n# Extract the generated name and return as JSON\nRESOURCE_NAME=$(echo \"$RESPONSE\" | jq -r '.resourceName // \"\"')\nMESSAGE=$(echo \"$RESPONSE\" | jq -r '.message // \"\"')\n    \nif [ -z \"$RESOURCE_NAME\" ]; then\n  echo '{\"error\": \"No resource name returned\"}' \u003e\u00262\n  exit 1\nfi\n    \n# Return the result\njq -n --arg name \"$RESOURCE_NAME\" --arg message \"$MESSAGE\" --arg id \"$RESOURCE_ID\" \\\n  '{name: $name, message: $message, resource_id: $id}'\n"
            ],
            "query": null,
            "result": {
              "message": "This resource type only allows lowercase names. The generated name has been updated to lowercase characters.The specified delimiter was removed. This is often caused by the length of the name exceeding the max length and the delimiter removed to shorten the value or the delimiter is not an allowed character for the resoure type.",
              "name": "stspadevuse01",
              "resource_id": "303"
            },
            "working_dir": null
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "program"
              },
              {
                "type": "index",
                "value": {
                  "value": 2,
                  "type": "number"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "module": "module.subnet_name",
      "mode": "data",
      "type": "external",
      "name": "resource_name",
      "provider": "provider[\"registry.terraform.io/hashicorp/external\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "-",
            "program": [
              "bash",
              "-c",
              "set -e\n    \n# Get resource type information\nif [ -n \"\" ]; then\n  # Find resource type with specific property\n  RESOURCE_INFO=$(curl -s -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n    \"http://localhost:8080/api/ResourceTypes\" | \\\n    jq -r '.[] | select(.ShortName == \"snet\" and .property == \"\" and .enabled == true) | \"\\(.id)|\\(.resource)|\\(.property)\"' | head -n1)\nelse\n  # Find resource type without property filter\n  RESOURCE_INFO=$(curl -s -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n    \"http://localhost:8080/api/ResourceTypes\" | \\\n    jq -r '.[] | select(.ShortName == \"snet\" and .enabled == true) | \"\\(.id)|\\(.resource)|\\(.property)\"' | head -n1)\nfi\n    \nif [ -z \"$RESOURCE_INFO\" ]; then\n  echo '{\"error\": \"Resource type not found\"}' \u003e\u00262\n  exit 1\nfi\n    \n# Extract resource ID\nRESOURCE_ID=$(echo \"$RESOURCE_INFO\" | cut -d'|' -f1)\n    \n# Generate name with resource ID\nRESPONSE=$(curl -s -X POST \"http://localhost:8080/api/ResourceNamingRequests/RequestName\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n  -d '{\n    \"ResourceType\": \"snet\",\n    \"ResourceId\": '$RESOURCE_ID',\n    \"ResourceEnvironment\": \"dev\",\n    \"ResourceLocation\": \"use\",\n    \"ResourceOrg\": \"so\",\n    \"ResourceProjAppSvc\": \"spa\",\n    \"ResourceFunction\": \"web\",\n    \"ResourceUnitDept\": \"\",\n    \"ResourceInstance\": \"01\",\n    \"CreatedBy\": \"terraform\"\n  }')\n    \n# Check if the response contains an error\nif echo \"$RESPONSE\" | jq -e '.success == false' \u003e /dev/null; then\n  ERROR_MSG=$(echo \"$RESPONSE\" | jq -r '.message // \"Unknown error\"')\n  echo \"{\\\"error\\\": \\\"$ERROR_MSG\\\"}\" \u003e\u00262\n  exit 1\nfi\n    \n# Extract the generated name and return as JSON\nRESOURCE_NAME=$(echo \"$RESPONSE\" | jq -r '.resourceName // \"\"')\nMESSAGE=$(echo \"$RESPONSE\" | jq -r '.message // \"\"')\n    \nif [ -z \"$RESOURCE_NAME\" ]; then\n  echo '{\"error\": \"No resource name returned\"}' \u003e\u00262\n  exit 1\nfi\n    \n# Return the result\njq -n --arg name \"$RESOURCE_NAME\" --arg message \"$MESSAGE\" --arg id \"$RESOURCE_ID\" \\\n  '{name: $name, message: $message, resource_id: $id}'\n"
            ],
            "query": null,
            "result": {
              "message": "",
              "name": "snet-spa-dev-use-01",
              "resource_id": "248"
            },
            "working_dir": null
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "program"
              },
              {
                "type": "index",
                "value": {
                  "value": 2,
                  "type": "number"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "module": "module.vm_linux_name",
      "mode": "data",
      "type": "external",
      "name": "resource_name",
      "provider": "provider[\"registry.terraform.io/hashicorp/external\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "-",
            "program": [
              "bash",
              "-c",
              "set -e\n    \n# Get resource type information\nif [ -n \"Linux\" ]; then\n  # Find resource type with specific property\n  RESOURCE_INFO=$(curl -s -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n    \"http://localhost:8080/api/ResourceTypes\" | \\\n    jq -r '.[] | select(.ShortName == \"vm\" and .property == \"Linux\" and .enabled == true) | \"\\(.id)|\\(.resource)|\\(.property)\"' | head -n1)\nelse\n  # Find resource type without property filter\n  RESOURCE_INFO=$(curl -s -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n    \"http://localhost:8080/api/ResourceTypes\" | \\\n    jq -r '.[] | select(.ShortName == \"vm\" and .enabled == true) | \"\\(.id)|\\(.resource)|\\(.property)\"' | head -n1)\nfi\n    \nif [ -z \"$RESOURCE_INFO\" ]; then\n  echo '{\"error\": \"Resource type not found\"}' \u003e\u00262\n  exit 1\nfi\n    \n# Extract resource ID\nRESOURCE_ID=$(echo \"$RESOURCE_INFO\" | cut -d'|' -f1)\n    \n# Generate name with resource ID\nRESPONSE=$(curl -s -X POST \"http://localhost:8080/api/ResourceNamingRequests/RequestName\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n  -d '{\n    \"ResourceType\": \"vm\",\n    \"ResourceId\": '$RESOURCE_ID',\n    \"ResourceEnvironment\": \"dev\",\n    \"ResourceLocation\": \"use\",\n    \"ResourceOrg\": \"so\",\n    \"ResourceProjAppSvc\": \"spa\",\n    \"ResourceFunction\": \"web\",\n    \"ResourceUnitDept\": \"\",\n    \"ResourceInstance\": \"01\",\n    \"CreatedBy\": \"terraform\"\n  }')\n    \n# Check if the response contains an error\nif echo \"$RESPONSE\" | jq -e '.success == false' \u003e /dev/null; then\n  ERROR_MSG=$(echo \"$RESPONSE\" | jq -r '.message // \"Unknown error\"')\n  echo \"{\\\"error\\\": \\\"$ERROR_MSG\\\"}\" \u003e\u00262\n  exit 1\nfi\n    \n# Extract the generated name and return as JSON\nRESOURCE_NAME=$(echo \"$RESPONSE\" | jq -r '.resourceName // \"\"')\nMESSAGE=$(echo \"$RESPONSE\" | jq -r '.message // \"\"')\n    \nif [ -z \"$RESOURCE_NAME\" ]; then\n  echo '{\"error\": \"No resource name returned\"}' \u003e\u00262\n  exit 1\nfi\n    \n# Return the result\njq -n --arg name \"$RESOURCE_NAME\" --arg message \"$MESSAGE\" --arg id \"$RESOURCE_ID\" \\\n  '{name: $name, message: $message, resource_id: $id}'\n"
            ],
            "query": null,
            "result": {
              "message": "This resource type only allows lowercase names. The generated name has been updated to lowercase characters.",
              "name": "vm-spa-dev-use-01",
              "resource_id": "85"
            },
            "working_dir": null
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "program"
              },
              {
                "type": "index",
                "value": {
                  "value": 2,
                  "type": "number"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "module": "module.vm_windows_name",
      "mode": "data",
      "type": "external",
      "name": "resource_name",
      "provider": "provider[\"registry.terraform.io/hashicorp/external\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "-",
            "program": [
              "bash",
              "-c",
              "set -e\n    \n# Get resource type information\nif [ -n \"Windows\" ]; then\n  # Find resource type with specific property\n  RESOURCE_INFO=$(curl -s -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n    \"http://localhost:8080/api/ResourceTypes\" | \\\n    jq -r '.[] | select(.ShortName == \"vm\" and .property == \"Windows\" and .enabled == true) | \"\\(.id)|\\(.resource)|\\(.property)\"' | head -n1)\nelse\n  # Find resource type without property filter\n  RESOURCE_INFO=$(curl -s -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n    \"http://localhost:8080/api/ResourceTypes\" | \\\n    jq -r '.[] | select(.ShortName == \"vm\" and .enabled == true) | \"\\(.id)|\\(.resource)|\\(.property)\"' | head -n1)\nfi\n    \nif [ -z \"$RESOURCE_INFO\" ]; then\n  echo '{\"error\": \"Resource type not found\"}' \u003e\u00262\n  exit 1\nfi\n    \n# Extract resource ID\nRESOURCE_ID=$(echo \"$RESOURCE_INFO\" | cut -d'|' -f1)\n    \n# Generate name with resource ID\nRESPONSE=$(curl -s -X POST \"http://localhost:8080/api/ResourceNamingRequests/RequestName\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n  -d '{\n    \"ResourceType\": \"vm\",\n    \"ResourceId\": '$RESOURCE_ID',\n    \"ResourceEnvironment\": \"dev\",\n    \"ResourceLocation\": \"use\",\n    \"ResourceOrg\": \"so\",\n    \"ResourceProjAppSvc\": \"spa\",\n    \"ResourceFunction\": \"app\",\n    \"ResourceUnitDept\": \"\",\n    \"ResourceInstance\": \"01\",\n    \"CreatedBy\": \"terraform\"\n  }')\n    \n# Check if the response contains an error\nif echo \"$RESPONSE\" | jq -e '.success == false' \u003e /dev/null; then\n  ERROR_MSG=$(echo \"$RESPONSE\" | jq -r '.message // \"Unknown error\"')\n  echo \"{\\\"error\\\": \\\"$ERROR_MSG\\\"}\" \u003e\u00262\n  exit 1\nfi\n    \n# Extract the generated name and return as JSON\nRESOURCE_NAME=$(echo \"$RESPONSE\" | jq -r '.resourceName // \"\"')\nMESSAGE=$(echo \"$RESPONSE\" | jq -r '.message // \"\"')\n    \nif [ -z \"$RESOURCE_NAME\" ]; then\n  echo '{\"error\": \"No resource name returned\"}' \u003e\u00262\n  exit 1\nfi\n    \n# Return the result\njq -n --arg name \"$RESOURCE_NAME\" --arg message \"$MESSAGE\" --arg id \"$RESOURCE_ID\" \\\n  '{name: $name, message: $message, resource_id: $id}'\n"
            ],
            "query": null,
            "result": {
              "message": "This resource type only allows lowercase names. The generated name has been updated to lowercase characters.The specified delimiter was removed. This is often caused by the length of the name exceeding the max length and the delimiter removed to shorten the value or the delimiter is not an allowed character for the resoure type.",
              "name": "vmspadevuse01",
              "resource_id": "86"
            },
            "working_dir": null
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "program"
              },
              {
                "type": "index",
                "value": {
                  "value": 2,
                  "type": "number"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "module": "module.vmss_linux_name",
      "mode": "data",
      "type": "external",
      "name": "resource_name",
      "provider": "provider[\"registry.terraform.io/hashicorp/external\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "-",
            "program": [
              "bash",
              "-c",
              "set -e\n    \n# Get resource type information\nif [ -n \"Linux\" ]; then\n  # Find resource type with specific property\n  RESOURCE_INFO=$(curl -s -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n    \"http://localhost:8080/api/ResourceTypes\" | \\\n    jq -r '.[] | select(.ShortName == \"vmss\" and .property == \"Linux\" and .enabled == true) | \"\\(.id)|\\(.resource)|\\(.property)\"' | head -n1)\nelse\n  # Find resource type without property filter\n  RESOURCE_INFO=$(curl -s -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n    \"http://localhost:8080/api/ResourceTypes\" | \\\n    jq -r '.[] | select(.ShortName == \"vmss\" and .enabled == true) | \"\\(.id)|\\(.resource)|\\(.property)\"' | head -n1)\nfi\n    \nif [ -z \"$RESOURCE_INFO\" ]; then\n  echo '{\"error\": \"Resource type not found\"}' \u003e\u00262\n  exit 1\nfi\n    \n# Extract resource ID\nRESOURCE_ID=$(echo \"$RESOURCE_INFO\" | cut -d'|' -f1)\n    \n# Generate name with resource ID\nRESPONSE=$(curl -s -X POST \"http://localhost:8080/api/ResourceNamingRequests/RequestName\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n  -d '{\n    \"ResourceType\": \"vmss\",\n    \"ResourceId\": '$RESOURCE_ID',\n    \"ResourceEnvironment\": \"dev\",\n    \"ResourceLocation\": \"use\",\n    \"ResourceOrg\": \"so\",\n    \"ResourceProjAppSvc\": \"spa\",\n    \"ResourceFunction\": \"api\",\n    \"ResourceUnitDept\": \"\",\n    \"ResourceInstance\": \"01\",\n    \"CreatedBy\": \"terraform\"\n  }')\n    \n# Check if the response contains an error\nif echo \"$RESPONSE\" | jq -e '.success == false' \u003e /dev/null; then\n  ERROR_MSG=$(echo \"$RESPONSE\" | jq -r '.message // \"Unknown error\"')\n  echo \"{\\\"error\\\": \\\"$ERROR_MSG\\\"}\" \u003e\u00262\n  exit 1\nfi\n    \n# Extract the generated name and return as JSON\nRESOURCE_NAME=$(echo \"$RESPONSE\" | jq -r '.resourceName // \"\"')\nMESSAGE=$(echo \"$RESPONSE\" | jq -r '.message // \"\"')\n    \nif [ -z \"$RESOURCE_NAME\" ]; then\n  echo '{\"error\": \"No resource name returned\"}' \u003e\u00262\n  exit 1\nfi\n    \n# Return the result\njq -n --arg name \"$RESOURCE_NAME\" --arg message \"$MESSAGE\" --arg id \"$RESOURCE_ID\" \\\n  '{name: $name, message: $message, resource_id: $id}'\n"
            ],
            "query": null,
            "result": {
              "message": "This resource type only allows lowercase names. The generated name has been updated to lowercase characters.",
              "name": "vmss-spa-dev-use-01",
              "resource_id": "87"
            },
            "working_dir": null
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "program"
              },
              {
                "type": "index",
                "value": {
                  "value": 2,
                  "type": "number"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "module": "module.vmss_windows_name",
      "mode": "data",
      "type": "external",
      "name": "resource_name",
      "provider": "provider[\"registry.terraform.io/hashicorp/external\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "-",
            "program": [
              "bash",
              "-c",
              "set -e\n    \n# Get resource type information\nif [ -n \"Windows\" ]; then\n  # Find resource type with specific property\n  RESOURCE_INFO=$(curl -s -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n    \"http://localhost:8080/api/ResourceTypes\" | \\\n    jq -r '.[] | select(.ShortName == \"vmss\" and .property == \"Windows\" and .enabled == true) | \"\\(.id)|\\(.resource)|\\(.property)\"' | head -n1)\nelse\n  # Find resource type without property filter\n  RESOURCE_INFO=$(curl -s -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n    \"http://localhost:8080/api/ResourceTypes\" | \\\n    jq -r '.[] | select(.ShortName == \"vmss\" and .enabled == true) | \"\\(.id)|\\(.resource)|\\(.property)\"' | head -n1)\nfi\n    \nif [ -z \"$RESOURCE_INFO\" ]; then\n  echo '{\"error\": \"Resource type not found\"}' \u003e\u00262\n  exit 1\nfi\n    \n# Extract resource ID\nRESOURCE_ID=$(echo \"$RESOURCE_INFO\" | cut -d'|' -f1)\n    \n# Generate name with resource ID\nRESPONSE=$(curl -s -X POST \"http://localhost:8080/api/ResourceNamingRequests/RequestName\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n  -d '{\n    \"ResourceType\": \"vmss\",\n    \"ResourceId\": '$RESOURCE_ID',\n    \"ResourceEnvironment\": \"dev\",\n    \"ResourceLocation\": \"use\",\n    \"ResourceOrg\": \"so\",\n    \"ResourceProjAppSvc\": \"spa\",\n    \"ResourceFunction\": \"app\",\n    \"ResourceUnitDept\": \"\",\n    \"ResourceInstance\": \"01\",\n    \"CreatedBy\": \"terraform\"\n  }')\n    \n# Check if the response contains an error\nif echo \"$RESPONSE\" | jq -e '.success == false' \u003e /dev/null; then\n  ERROR_MSG=$(echo \"$RESPONSE\" | jq -r '.message // \"Unknown error\"')\n  echo \"{\\\"error\\\": \\\"$ERROR_MSG\\\"}\" \u003e\u00262\n  exit 1\nfi\n    \n# Extract the generated name and return as JSON\nRESOURCE_NAME=$(echo \"$RESPONSE\" | jq -r '.resourceName // \"\"')\nMESSAGE=$(echo \"$RESPONSE\" | jq -r '.message // \"\"')\n    \nif [ -z \"$RESOURCE_NAME\" ]; then\n  echo '{\"error\": \"No resource name returned\"}' \u003e\u00262\n  exit 1\nfi\n    \n# Return the result\njq -n --arg name \"$RESOURCE_NAME\" --arg message \"$MESSAGE\" --arg id \"$RESOURCE_ID\" \\\n  '{name: $name, message: $message, resource_id: $id}'\n"
            ],
            "query": null,
            "result": {
              "message": "This resource type only allows lowercase names. The generated name has been updated to lowercase characters.The specified delimiter was removed. This is often caused by the length of the name exceeding the max length and the delimiter removed to shorten the value or the delimiter is not an allowed character for the resoure type.",
              "name": "vmssspadevuse01",
              "resource_id": "88"
            },
            "working_dir": null
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "program"
              },
              {
                "type": "index",
                "value": {
                  "value": 2,
                  "type": "number"
                }
              }
            ]
          ]
        }
      ]
    },
    {
      "module": "module.vnet_name",
      "mode": "data",
      "type": "external",
      "name": "resource_name",
      "provider": "provider[\"registry.terraform.io/hashicorp/external\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "-",
            "program": [
              "bash",
              "-c",
              "set -e\n    \n# Get resource type information\nif [ -n \"\" ]; then\n  # Find resource type with specific property\n  RESOURCE_INFO=$(curl -s -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n    \"http://localhost:8080/api/ResourceTypes\" | \\\n    jq -r '.[] | select(.ShortName == \"vnet\" and .property == \"\" and .enabled == true) | \"\\(.id)|\\(.resource)|\\(.property)\"' | head -n1)\nelse\n  # Find resource type without property filter\n  RESOURCE_INFO=$(curl -s -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n    \"http://localhost:8080/api/ResourceTypes\" | \\\n    jq -r '.[] | select(.ShortName == \"vnet\" and .enabled == true) | \"\\(.id)|\\(.resource)|\\(.property)\"' | head -n1)\nfi\n    \nif [ -z \"$RESOURCE_INFO\" ]; then\n  echo '{\"error\": \"Resource type not found\"}' \u003e\u00262\n  exit 1\nfi\n    \n# Extract resource ID\nRESOURCE_ID=$(echo \"$RESOURCE_INFO\" | cut -d'|' -f1)\n    \n# Generate name with resource ID\nRESPONSE=$(curl -s -X POST \"http://localhost:8080/api/ResourceNamingRequests/RequestName\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"APIKey: f855c41b-2d4c-4f6f-95c9-58e38775c6ce\" \\\n  -d '{\n    \"ResourceType\": \"vnet\",\n    \"ResourceId\": '$RESOURCE_ID',\n    \"ResourceEnvironment\": \"dev\",\n    \"ResourceLocation\": \"use\",\n    \"ResourceOrg\": \"so\",\n    \"ResourceProjAppSvc\": \"spa\",\n    \"ResourceFunction\": \"\",\n    \"ResourceUnitDept\": \"\",\n    \"ResourceInstance\": \"01\",\n    \"CreatedBy\": \"terraform\"\n  }')\n    \n# Check if the response contains an error\nif echo \"$RESPONSE\" | jq -e '.success == false' \u003e /dev/null; then\n  ERROR_MSG=$(echo \"$RESPONSE\" | jq -r '.message // \"Unknown error\"')\n  echo \"{\\\"error\\\": \\\"$ERROR_MSG\\\"}\" \u003e\u00262\n  exit 1\nfi\n    \n# Extract the generated name and return as JSON\nRESOURCE_NAME=$(echo \"$RESPONSE\" | jq -r '.resourceName // \"\"')\nMESSAGE=$(echo \"$RESPONSE\" | jq -r '.message // \"\"')\n    \nif [ -z \"$RESOURCE_NAME\" ]; then\n  echo '{\"error\": \"No resource name returned\"}' \u003e\u00262\n  exit 1\nfi\n    \n# Return the result\njq -n --arg name \"$RESOURCE_NAME\" --arg message \"$MESSAGE\" --arg id \"$RESOURCE_ID\" \\\n  '{name: $name, message: $message, resource_id: $id}'\n"
            ],
            "query": null,
            "result": {
              "message": "",
              "name": "vnet-spa-dev-use-01",
              "resource_id": "247"
            },
            "working_dir": null
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "program"
              },
              {
                "type": "index",
                "value": {
                  "value": 2,
                  "type": "number"
                }
              }
            ]
          ]
        }
      ]
    }
  ],
  "check_results": null
}
